<?php

namespace App\Business;

use App\Entity;
use Illuminate\Support\Collection;

class AppFormEvaluation extends PhaseImpl
{

    private $status = -1;

    protected function getEntity()
    {
        $entity = Entity::where('name', 'AppFormEvaluation')->first();
        if($entity == null) {
            $entity = Entity::create(['name' => 'AppFormEvaluation', 'description' => __('Ocena prijave')]);
        }

        return $entity;
    }

    public function getDisplayName(): string
    {
        return 'Ocena prijave';
    }

    public function getDisplayId(): string
    {
        return '#applicationEval';
    }

    public function getDisplayForm()
    {
        return 'profiles.forms._app_eval-form';
    }

    public function getAttributesData(): array
    {
        return [
            'attributes' => $this->getAttributes(),
            'id' => $this->getId(),
            'validStatus' => $this->getStatusValue(),
            'model' => $this,
            'profile' => $this->getWorkflow()->getProgram()->getProfile()->getId()
        ];
    }

    public function getStatusValue(): int
    {
        return $this->status;
    }

    public function setStatusValue($value)
    {
        $this->status = $value;
    }

    public function requiresEntryEmail()
    {
        // TODO: Implement requiresEntryEmail() method.
    }

    public function getEntryEmailTemplate()
    {
        // TODO: Implement getEntryEmailTemplate() method.
    }

    public function requiresExitEmail()
    {
        // TODO: Implement requiresExitEmail() method.
    }

    public function getExitEmailTemplate()
    {
        // TODO: Implement getExitEmailTemplate() method.
    }

    public function requiresEntrySituation()
    {
        // TODO: Implement requiresEntrySituation() method.
    }

    public function getEntrySituation()
    {
        // TODO: Implement getEntrySituation() method.
    }

    public function requiresExitSituation()
    {
        // TODO: Implement requiresExitSituation() method.
    }

    public function getExitSituation()
    {
        // TODO: Implement getExitSituation() method.
    }

    protected function setAttributes($data = null)
    {
        if($data == null) {
            $data = [
                'passed' => false,
                'assertion_date' => now(),
                'note' => null,
            ];
        }
        parent::setAttributes($data); // TODO: Change the autogenerated stub
    }

    public static function getAttributesDefinition(): Collection
    {
        $attributes = collect([]);

        $attributes->add(self::selectOrCreateAttribute(['assertion_date', __("Date of Assertion"), 'datetime', NULL, 1]));
        $attributes->add(self::selectOrCreateAttribute(['passed', __('Passed'), 'bool', NULL, 2]));
        $attributes->add(self::selectOrCreateAttribute(['note', __('Note'), 'text', NULL, 3]));

        return $attributes;
    }
}
